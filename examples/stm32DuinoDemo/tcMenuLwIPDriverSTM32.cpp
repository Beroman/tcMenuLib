/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <remote/TransportNetworkDriver.h>

namespace tcremote {

    SocketErrCode startNetLayerDhcp() {
        return SOCK_ERR_UNSUPPORTED;
    }

    SocketErrCode startNetLayerManual(const uint8_t* ip, const uint8_t* mac, const uint8_t* mask) {
        return SOCK_ERR_UNSUPPORTED;
    }

    void printableIpAddress(socket_t sock, char* buffer, size_t bufferSize) {
        if(!buffer) return;

        if(sock == TC_BAD_SOCKET_ID) buffer[0]=0;
        if(sock == TC_LOCALHOST_SOCKET_ID) {
            buffer[0] = 0;
        } else {
            buffer[0] = 0;
        }
    }

    SocketErrCode initialiseAccept(int port, ServerAcceptedCallback onServerAccepted, socket_t& acceptSocketFd) {
        acceptSocketFd = TC_BAD_SOCKET_ID;
        return SOCK_ERR_FAILED;
    }

    bool rawDataAvailable(socket_t socketNum) {
        return false;
    }

    int rawReadData(socket_t socketNum, void* data, size_t dataLen) {
        return -1;
    }

    SocketErrCode rawWriteData(socket_t socketNum, const void* data, size_t dataLen, int timeoutMillis) {
        return SOCK_ERR_FAILED;
    }

    void closeSocket(socket_t socketFd) {
        if(socketFd >=0) {
            //lwip_close(socketFd);
        }
    }
}