/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "takeOverDisplay.h"

// Global variable declarations

LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7, io23017);
LiquidCrystalRenderer renderer(lcd, LCD_WIDTH, LCD_HEIGHT);

const char PROGMEM applicationName[] = "LedBuiltIn";

// Global Menu Item declarations
const PROGMEM TextMenuInfo minfoText = { "Text", 7, 0xffff, 10, NO_CALLBACK };
TextMenuItem menuText(&minfoText, NULL);
const PROGMEM AnyMenuInfo minfoSaveSettings = { "Save Settings", 6, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSaveSettings(&minfoSaveSettings, NULL);
const PROGMEM AnalogMenuInfo minfoPower = { "Power", 5, 5, 250, NO_CALLBACK, 0, 10, "W" };
AnalogMenuItem menuPower(&minfoPower, 0, &menuSaveSettings);
const PROGMEM BooleanMenuInfo minfoEnabled = { "Enabled", 4, 2, 1, NO_CALLBACK, NAMING_TRUE_FALSE };
BooleanMenuItem menuEnabled(&minfoEnabled, false, &menuPower);
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&menuEnabled, (const AnyMenuInfo*)&minfoSettings);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuText);
const char enumStrFood_0[] PROGMEM = "Pizza";
const char enumStrFood_1[] PROGMEM = "Pasta";
const char enumStrFood_2[] PROGMEM = "Salad";
const char* const enumStrFood[] PROGMEM  = { enumStrFood_0, enumStrFood_1, enumStrFood_2 };
const PROGMEM EnumMenuInfo minfoFood = { "Food", 2, 3, 2, onFoodChoice, enumStrFood };
EnumMenuItem menuFood(&minfoFood, 0, &menuSettings);
const PROGMEM AnyMenuInfo minfoTakeDisplay = { "Take display", 1, 0xffff, 0, onTakeOverDisplay };
ActionMenuItem menuTakeDisplay(&minfoTakeDisplay, &menuFood);

// Set up code
void setupMenu() {
    switches.initialise(io23017, true);
    menuMgr.initForEncoder(&renderer, &menuTakeDisplay, ENCODER_PIN_A, ENCODER_PIN_B, ENCODER_PIN_OK);
    lcd.begin(LCD_WIDTH, LCD_HEIGHT);
	pinMode(LCD_PWM_PIN, OUTPUT);
	analogWrite(LCD_PWM_PIN, 10);

}

