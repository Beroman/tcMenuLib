/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "esp32Amplifier_menu.h"
#include <ThemeCoolBlueModern.h>

// Global variable declarations

const PROGMEM  ConnectorLocalInfo applicationInfo = { "ESP Amplifier", "4656c798-10c6-4110-8e03-b9c51ed8fffb" };

TFT_eSPI tft;
TfteSpiDrawable tftDrawable(&tft, 45);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &tftDrawable);
iotouch::ResistiveTouchInterrogator touchInterrogator(2, 33, 32, 0);
MenuTouchScreenManager touchScreen(&touchInterrogator, &renderer, iotouch::TouchInterrogator::LANDSCAPE);
WiFiServer server(3333);

// Global Menu Item declarations

RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityPasscodeRtCall, textItemRenderFn, "Passcode", 37, NO_CALLBACK)
TextMenuItem menuConnectivityPasscode(fnConnectivityPasscodeRtCall, 19, 20, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivitySSIDRtCall, textItemRenderFn, "SSID", 17, NO_CALLBACK)
TextMenuItem menuConnectivitySSID(fnConnectivitySSIDRtCall, 18, 20, &menuConnectivityPasscode);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityIPAddressRtCall, ipAddressRenderFn, "IP address", -1, NO_CALLBACK)
IpAddressMenuItem menuConnectivityIPAddress(fnConnectivityIPAddressRtCall, 13, &menuConnectivitySSID);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityRtCall, backSubItemRenderFn, "Connectivity", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 12, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(fnConnectivityRtCall, &menuConnectivityIPAddress);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, NULL);
ListRuntimeMenuItem menuStatusDataList(21, 0, fnStatusDataListRtCall, NULL);
const PROGMEM AnyMenuInfo minfoStatusShowDialogs = { "Show Dialogs", 20, 0xffff, 0, onShowDialogs };
ActionMenuItem menuStatusShowDialogs(&minfoStatusShowDialogs, &menuStatusDataList);
const PROGMEM AnalogMenuInfo minfoStatusRightVU = { "Right VU", 16, 0xffff, 30000, NO_CALLBACK, -20000, 1000, "dB" };
AnalogMenuItem menuStatusRightVU(&minfoStatusRightVU, 0, &menuStatusShowDialogs);
const PROGMEM AnalogMenuInfo minfoStatusLeftVU = { "Left VU", 15, 0xffff, 30000, NO_CALLBACK, -20000, 1000, "dB" };
AnalogMenuItem menuStatusLeftVU(&minfoStatusLeftVU, 0, &menuStatusRightVU);
const char enumStrStatusAmpStatus_0[] PROGMEM = "Warm up";
const char enumStrStatusAmpStatus_1[] PROGMEM = "Warm Valves";
const char enumStrStatusAmpStatus_2[] PROGMEM = "Ready";
const char enumStrStatusAmpStatus_3[] PROGMEM = "DC Protection";
const char enumStrStatusAmpStatus_4[] PROGMEM = "Overloaded";
const char enumStrStatusAmpStatus_5[] PROGMEM = "Overheated";
const char* const enumStrStatusAmpStatus[] PROGMEM  = { enumStrStatusAmpStatus_0, enumStrStatusAmpStatus_1, enumStrStatusAmpStatus_2, enumStrStatusAmpStatus_3, enumStrStatusAmpStatus_4, enumStrStatusAmpStatus_5 };
const PROGMEM EnumMenuInfo minfoStatusAmpStatus = { "Amp Status", 14, 0xffff, 5, NO_CALLBACK, enumStrStatusAmpStatus };
EnumMenuItem menuStatusAmpStatus(&minfoStatusAmpStatus, 0, &menuStatusLeftVU);
RENDERING_CALLBACK_NAME_INVOKE(fnStatusRtCall, backSubItemRenderFn, "Status", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoStatus = { "Status", 6, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStatus(fnStatusRtCall, &menuStatusAmpStatus);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, &menuConnectivity);
const PROGMEM AnalogMenuInfo minfoSettingsValveHeating = { "Valve Heating", 17, 15, 600, NO_CALLBACK, 0, 10, "s" };
AnalogMenuItem menuSettingsValveHeating(&minfoSettingsValveHeating, 0, NULL);
const PROGMEM AnalogMenuInfo minfoSettingsWarmUpTime = { "Warm up time", 11, 7, 300, NO_CALLBACK, 0, 10, "s" };
AnalogMenuItem menuSettingsWarmUpTime(&minfoSettingsWarmUpTime, 0, &menuSettingsValveHeating);
const PROGMEM AnalogMenuInfo minfoSettingsLine3Adj = { "Line 3 adj", 10, 13, 20, NO_CALLBACK, -10, 2, "dB" };
AnalogMenuItem menuSettingsLine3Adj(&minfoSettingsLine3Adj, 0, &menuSettingsWarmUpTime);
const PROGMEM AnalogMenuInfo minfoSettingsLine2Adj = { "Line 2 adj", 9, 11, 20, NO_CALLBACK, -10, 2, "dB" };
AnalogMenuItem menuSettingsLine2Adj(&minfoSettingsLine2Adj, 0, &menuSettingsLine3Adj);
const PROGMEM AnalogMenuInfo minfoSettingsLine1Adj = { "Line 1 adj", 8, 9, 20, NO_CALLBACK, -10, 2, "dB" };
AnalogMenuItem menuSettingsLine1Adj(&minfoSettingsLine1Adj, 0, &menuSettingsLine2Adj);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsChannelNamesRtCall, backSubItemRenderFn, "Channel Names", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettingsChannelNames = { "Channel Names", 7, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettingsChannelNames(fnSettingsChannelNamesRtCall, NULL);
SubMenuItem menuSettingsChannelNames(&minfoSettingsChannelNames, &menuBackSettingsChannelNames, &menuSettingsLine1Adj);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsChannelNames);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuStatus);
const PROGMEM BooleanMenuInfo minfoMute = { "Mute", 4, 0xffff, 1, onMuteSound, NAMING_TRUE_FALSE };
BooleanMenuItem menuMute(&minfoMute, false, &menuSettings);
const PROGMEM BooleanMenuInfo minfoDirect = { "Direct", 3, 6, 1, onAudioDirect, NAMING_TRUE_FALSE };
BooleanMenuItem menuDirect(&minfoDirect, false, &menuMute);
RENDERING_CALLBACK_NAME_INVOKE(fnChannelsRtCall, enumItemRenderFn, "Channels", 4, onChannelChanged)
ScrollChoiceMenuItem menuChannels(2, fnChannelsRtCall, 0, 150, 16, 3, &menuDirect);
const PROGMEM AnalogMenuInfo minfoVolume = { "Volume", 1, 2, 255, onVolumeChanged, -180, 2, "dB" };
AnalogMenuItem menuVolume(&minfoVolume, 0, &menuChannels);

// Set up code

void setupMenu() {
    // Read only and local only function calls
    menuConnectivityIPAddress.setReadOnly(true);

    tft.begin();
    tft.setRotation(1);
    renderer.setUpdatesPerSecond(10);
    touchScreen.start();
    menuMgr.initWithoutInput(&renderer, &menuVolume);
    remoteServer.begin(&server, &applicationInfo);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    installCoolBlueModernTheme(renderer, MenuFontDef(nullptr, 4), MenuFontDef(nullptr, 4), false);
}

