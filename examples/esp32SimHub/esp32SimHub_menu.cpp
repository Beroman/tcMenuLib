/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "esp32SimHub_menu.h"

// Global variable declarations

const PROGMEM  ConnectorLocalInfo applicationInfo = { "SimHub Link", "4db9fbfe-9fab-4759-b8ff-3e0c6700f475" };

Adafruit_ILI9341 gfx(22, 17, 16);
AdafruitDrawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
SimhubConnector connector;

// Global Menu Item declarations

const PROGMEM AnyMenuInfo minfoShowDashboard = { "Show dashboard", 9, 0xffff, 0, onShowDash };
ActionMenuItem menuShowDashboard(&minfoShowDashboard, NULL);
const PROGMEM AnalogMenuInfo minfoLap = { "Lap", 10, 0xffff, 999, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuLap(&minfoLap, 0, &menuShowDashboard);
const char enumStrDashboard_0[] PROGMEM = "F1 Wheel";
const char enumStrDashboard_1[] PROGMEM = "GT3 Wheel";
const char enumStrDashboard_2[] PROGMEM = "Custom";
const char* const enumStrDashboard[] PROGMEM  = { enumStrDashboard_0, enumStrDashboard_1, enumStrDashboard_2 };
const PROGMEM EnumMenuInfo minfoDashboard = { "Dashboard", 8, 0xffff, 2, onDashChanged, enumStrDashboard };
EnumMenuItem menuDashboard(&minfoDashboard, 0, &menuLap);
const PROGMEM AnalogMenuInfo minfoSettingsTestItem1 = { "Test Item 1", 5, 0xffff, 100, NO_CALLBACK, 0, 2, "" };
AnalogMenuItem menuSettingsTestItem1(&minfoSettingsTestItem1, 0, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsTestItem1);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuDashboard);
const PROGMEM BooleanMenuInfo minfoSimHubLink = { "SimHub Link", 3, 0xffff, 1, onConnectionChange, NAMING_ON_OFF };
BooleanMenuItem menuSimHubLink(&minfoSimHubLink, false, &menuSettings);
const PROGMEM AnalogMenuInfo minfoTyreTemp = { "Tyre Temp", 7, 0xffff, 255, NO_CALLBACK, 0, 1, "C" };
AnalogMenuItem menuTyreTemp(&minfoTyreTemp, 0, &menuSimHubLink);
RENDERING_CALLBACK_NAME_INVOKE(fnGearRtCall, textItemRenderFn, "Gear", -1, NO_CALLBACK)
TextMenuItem menuGear(fnGearRtCall, 6, 2, &menuTyreTemp);
const PROGMEM AnalogMenuInfo minfoRPM = { "RPM", 2, 0xffff, 32000, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuRPM(&minfoRPM, 0, &menuGear);
const PROGMEM AnalogMenuInfo minfoSpeed = { "Speed", 1, 0xffff, 1000, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuSpeed(&minfoSpeed, 0, &menuRPM);

// Set up code

void setupMenu() {
    gfx.begin();
    gfx.setRotation(1);
    renderer.setUpdatesPerSecond(5);
    renderer.prepareDisplay(false, &FreeSans9pt7b, 1, &FreeSans18pt7b, 1, true);
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForEncoder(&renderer, &menuSpeed, 36, 37, 21);
    connector.begin(&Serial, 3);

    // Read only and local only function calls
    menuRPM.setReadOnly(true);
    menuSpeed.setReadOnly(true);
    menuTyreTemp.setReadOnly(true);
}

